{
  "info": {
    "name": "StackIt API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "c67f9e4d-1234-4000-9000-abcd1234abcd",
    "description": "Postman collection covering all StackIt backend endpoints. Use the `{{baseUrl}}` and `{{token}}` environment variables. The auth/login request stores the JWT token to `token` so subsequent requests work automatically."
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:3000/api" },
    { "key": "token", "value": "" },
    { "key": "questionId", "value": "" },
    { "key": "answerId", "value": "" },
    { "key": "notificationId", "value": "" },
    { "key": "adminToken", "value": "" },
    { "key": "userId", "value": "" }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"user1\",\n  \"email\": \"user1@example.com\",\n  \"password\": \"pass1234\"\n}"
            }
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const data = pm.response.json();",
                  "pm.environment.set('token', data.token);",
                  "pm.environment.set('userId', data.user._id);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user1@example.com\",\n  \"password\": \"pass1234\"\n}"
            }
          }
        }
      ]
    },
    {
      "name": "Admin Auth",
      "item": [
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const data = pm.response.json();",
                  "pm.environment.set('adminToken', data.token);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"pass1234\"\n}"
            }
          }
        }
      ]
    },

    {
      "name": "Users",
      "item": [
        {
          "name": "Get Me",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{token}}" } ],
            "url": { "raw": "{{baseUrl}}/users/me", "host": ["{{baseUrl}}"], "path": ["users", "me"] }
          }
        },
        {
          "name": "Update Me",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/users/me", "host": ["{{baseUrl}}"], "path": ["users", "me"] },
            "body": { "mode": "raw", "raw": "{\n  \"username\": \"newName\"\n}" }
          }
        }
      ]
    },
    {
      "name": "Questions",
      "item": [
        {
          "name": "Create Question",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": ["const q = pm.response.json().question; pm.environment.set('questionId', q._id);"]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/questions", "host": ["{{baseUrl}}"], "path": ["questions"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"First question\",\n  \"body\": \"Body must be at least 10 chars\",\n  \"tags\": [\"tag1\"]\n}"
            }
          }
        },
        {
          "name": "List Questions",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/questions?page=1&limit=10", "host": ["{{baseUrl}}"], "path": ["questions"], "query": [ {"key":"page","value":"1"},{"key":"limit","value":"10"} ] }
          }
        },
        {
          "name": "Get Question",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/questions/{{questionId}}", "host": ["{{baseUrl}}"], "path": ["questions", "{{questionId}}"] }
          }
        }
      ]
    },
    {
      "name": "Answers",
      "item": [
        {
          "name": "Add Answer",
          "event": [ { "listen": "test", "script": { "exec": ["pm.environment.set('answerId', pm.response.json().answer._id);"] } } ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/questions/{{questionId}}/answers", "host": ["{{baseUrl}}"], "path": ["questions", "{{questionId}}", "answers"] },
            "body": { "mode": "raw", "raw": "{\n  \"body\": \"My answer body\"\n}" }
          }
        },
        {
          "name": "Vote (+1)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{token}}" }, { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{baseUrl}}/questions/{{questionId}}/answers/{{answerId}}/vote", "host": ["{{baseUrl}}"], "path": ["questions","{{questionId}}","answers","{{answerId}}","vote"] },
            "body": { "mode": "raw", "raw": "{\n  \"vote\": 1\n}" }
          }
        },
        {
          "name": "Accept Answer",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{token}}" } ],
            "url": { "raw": "{{baseUrl}}/questions/{{questionId}}/answers/{{answerId}}/accept", "host": ["{{baseUrl}}"], "path": ["questions","{{questionId}}","answers","{{answerId}}","accept"] }
          }
        }
      ]
    },
    {
      "name": "Tags",
      "item": [
        {
          "name": "Get Tags",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/tags?limit=20", "host": ["{{baseUrl}}"], "path": ["tags"], "query": [ {"key":"limit","value":"20"} ] }
          }
        }
      ]
    },
    {
      "name": "Notifications",
      "item": [
        {
          "name": "List Notifications",
          "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{token}}" } ], "url": { "raw": "{{baseUrl}}/notifications", "host": ["{{baseUrl}}"], "path": ["notifications"] } }
        },
        {
          "name": "Mark One Read",
          "request": { "method": "PATCH", "header": [ { "key": "Authorization", "value": "Bearer {{token}}" } ], "url": { "raw": "{{baseUrl}}/notifications/{{notificationId}}/read", "host": ["{{baseUrl}}"], "path": ["notifications","{{notificationId}}","read"] } }
        },
        {
          "name": "Mark All Read",
          "request": { "method": "PATCH", "header": [ { "key": "Authorization", "value": "Bearer {{token}}" } ], "url": { "raw": "{{baseUrl}}/notifications/read-all", "host": ["{{baseUrl}}"], "path": ["notifications","read-all"] } }
        }
      ]
    },
    {
      "name": "Admin (requires ADMIN token)",
      "item": [
        {
          "name": "Ban User",
          "request": { "method": "PATCH", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" } ], "url": { "raw": "{{baseUrl}}/admin/users/{{userId}}/ban", "host": ["{{baseUrl}}"], "path": ["admin","users","{{userId}}","ban"] } }
        },
        {
          "name": "Delete Question",
          "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" } ], "url": { "raw": "{{baseUrl}}/admin/questions/{{questionId}}", "host": ["{{baseUrl}}"], "path": ["admin","questions","{{questionId}}"] } }
        }
      ]
    }
  ]
}
