[{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\.eslintrc.cjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":19,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// .eslintrc.cjs\r\nmodule.exports = {\r\n    parser: '@typescript-eslint/parser',\r\n    parserOptions: {\r\n      ecmaVersion: 2022,\r\n      sourceType: 'module',\r\n    },\r\n    env: {\r\n      node: true,\r\n      es2022: true,\r\n    },\r\n    extends: [\r\n      'eslint:recommended',\r\n      'plugin:@typescript-eslint/recommended',\r\n    ],\r\n    plugins: ['@typescript-eslint'],\r\n    rules: {\r\n      // e.g. turn off console warnings in dev\r\n      'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',\r\n      // limit complexity\r\n      complexity: ['error', { max: 10 }],\r\n    },\r\n  };\r\n  ","usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\config\\db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\config\\redis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\middleware\\auth.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-non-null-assertion').","line":33,"column":7,"severity":1,"nodeType":null,"fix":{"range":[1106,1174],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\r\n * JWT authentication & RBAC helpers.\r\n * --------------------------------------------------\r\n *  – requireAuth(): verifies token, loads user, puts it on req.user\r\n *  – requireRole(...roles): optional extra guard for ADMIN-only etc.\r\n */\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\nimport { User, UserDocument, UserRole } from '../models/User';\r\n\r\nexport interface RequestWithUser extends Request {\r\n  user: UserDocument;\r\n}\r\n\r\nconst getTokenFromHeader = (req: Request): string | null => {\r\n  const header = req.headers.authorization;\r\n  if (header?.startsWith('Bearer ')) return header.substring(7);\r\n  return null;\r\n};\r\n\r\nexport const requireAuth =\r\n  () => async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const token = getTokenFromHeader(req);\r\n      if (!token) {\n        res.status(401).json({ message: 'Missing auth token' });\n        return;\n      }\r\n\r\n      const secret = process.env.JWT_SECRET as string;\r\n      const decoded = jwt.verify(token, secret) as JwtPayload;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n      const user = await User.findById(decoded.sub).select('+password');\r\n      if (!user || user.banned) {\r\n        res.status(401).json({ message: 'Invalid or banned user' });\n        return;\r\n      }\r\n\r\n      (req as RequestWithUser).user = user;\r\n      next();\r\n    } catch (err) {\r\n      res.status(401).json({ message: 'Unauthorized', error: (err as Error).message });\r\n    }\r\n  };\r\n\r\n/**\r\n * Optional role guard – only allow specific roles.\r\n * Example: app.get('/admin', requireRole(UserRole.ADMIN), handler)\r\n */\r\nexport const requireRole =\r\n  (...roles: UserRole[]) =>\r\n  (req: Request, res: Response, next: NextFunction): void => {\r\n    const { user } = req as RequestWithUser;\r\n    if (!user || !roles.includes(user.role)) {\r\n      res.status(403).json({ message: 'Forbidden' });\r\n    } else {\r\n      next();\r\n    }\r\n  };","usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\middleware\\validate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\models\\Answer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\models\\Notification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\models\\Question.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Semester_7\\Odoo\\odoo-Hackathon-2025-StackIt\\backend\\src\\models\\User.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-non-null-assertion').","line":45,"column":3,"severity":1,"nodeType":null,"fix":{"range":[1234,1302],"text":" "}},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":70,"column":63,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":70,"endColumn":65,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[2097,2099],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[2097,2099],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * User model & TS interfaces.\n */\nimport mongoose, { Schema, model, Document, HydratedDocument } from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nexport enum UserRole {\n  USER = 'USER',\n  ADMIN = 'ADMIN'\n}\n\nexport interface IUser {\n  username: string;\n  email: string;\n  password: string; // hashed\n  role: UserRole;\n  banned: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IUserMethods {\n  comparePassword: (candidate: string) => Promise<boolean>;\n  generateJWT: () => string;\n}\n\nexport type UserDocument = HydratedDocument<IUser, IUserMethods> & Document;\n\nconst UserSchema = new Schema<IUser, UserDocument, IUserMethods>(\n  {\n    username: { type: String, required: true, unique: true, trim: true },\n    email: { type: String, required: true, unique: true, lowercase: true, trim: true },\n    password: { type: String, required: true, select: false },\n    role: { type: String, enum: Object.values(UserRole), default: UserRole.USER },\n    banned: { type: Boolean, default: false }\n  },\n  { timestamps: true }\n);\n\n/* Hash password before save */\nUserSchema.pre('save', async function () {\n  if (!this.isModified('password')) return;\n  const salt = await bcrypt.genSalt(10);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  this.password = await bcrypt.hash(this.password!, salt);\n});\n\nUserSchema.methods.comparePassword = async function (candidate: string): Promise<boolean> {\n  return bcrypt.compare(candidate, this.password);\n};\n\nUserSchema.methods.generateJWT = function (): string {\n  const secret: jwt.Secret = (process.env.JWT_SECRET ?? 'secret_key') as jwt.Secret;\n  const expiresInSeconds = process.env.JWT_EXPIRES ? Number(process.env.JWT_EXPIRES) : 60 * 60 * 24 * 7; // default 7 days\n  const signOptions: jwt.SignOptions = {\n    expiresIn: expiresInSeconds,\n  };\n\n  return jwt.sign(\n    {\n      sub: this._id.toString(), // ensure `sub` is a string as expected by JwtPayload\n      role: this.role,\n    },\n    secret,\n    signOptions\n  );\n};\n\nexport const User = model<IUser, mongoose.Model<UserDocument, {}, IUserMethods>>(\n  'User',\n  UserSchema\n);","usedDeprecatedRules":[]}]
